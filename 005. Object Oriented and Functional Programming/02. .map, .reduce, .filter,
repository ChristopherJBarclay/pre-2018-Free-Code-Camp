/*  Object functions
  
    .map
        the map function iterates through every element in an array and creates a new array with modified values
         without changing the original array 
          eg:
            var oldArray = [1, 2, 3];
            var timesFour = oldArray.map(function(val){
                return val * 4;
            });
            console.log(timesFour); // returns [4, 8, 12]
            console.log(oldArray);  // returns [1, 2, 3]
    

    .reduce
        condenses an array to one value
          eg:
            var singleVal = array.reduce(function(previousVal, currentVal) {
                return previousVal - currentVal;
            }, 0);
        reduce can have an optional second parameter which sets the accumulator's initial value. 
        if no value is set, the first element of the array is the initial value and currentVal becomes the second element of the array.
        
    
    Accumulator
        an accumulator is a running total that keeps track after each iteration of the .reduce function
        

     
     .filter
        iterate through an array and filter out elements when a given condition is not true (using a callback function)
          eg:
             array = array.filter(function(val) {
                return val !== 5;
              });
        .filter can have a second and third argument, which are not shown in the example above.
        
        
     .sort
        easily sort the values in an array alphabetically or numerically
        .sort alters the original array and returns it
        .sort can be passed a compare function as a callback
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
